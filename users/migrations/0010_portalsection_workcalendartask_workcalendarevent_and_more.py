# Generated by Django 4.2.24 on 2025-10-31 13:42

from decimal import Decimal
from django.conf import settings
import django.core.validators
from django.db import migrations, models
import django.db.models.deletion


class Migration(migrations.Migration):

    dependencies = [
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
        ('users', '0009_usercompanymembership'),
    ]

    operations = [
        migrations.CreateModel(
            name='PortalSection',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(max_length=150)),
                ('slug', models.SlugField(help_text='Auto-generated from the title if left blank.', max_length=160, unique=True)),
                ('description', models.TextField(blank=True)),
                ('visibility', models.CharField(choices=[('public', 'All authenticated users'), ('managers', 'Management and above'), ('private', 'Section editors only')], default='public', max_length=20)),
                ('layout', models.CharField(choices=[('list', 'Resource list'), ('cards', 'Card grid'), ('kanban', 'Kanban / swimlanes'), ('timeline', 'Timeline')], default='list', max_length=20)),
                ('configuration', models.JSONField(blank=True, default=dict, help_text='UI preferences and filters for this section.')),
                ('icon', models.CharField(blank=True, help_text='Heroicons name or custom CSS class.', max_length=60)),
                ('order', models.PositiveIntegerField(default=0)),
                ('is_active', models.BooleanField(default=True)),
                ('is_pinned', models.BooleanField(default=False)),
                ('allow_uploads', models.BooleanField(default=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('created_by', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='created_portal_sections', to=settings.AUTH_USER_MODEL)),
                ('editors', models.ManyToManyField(blank=True, related_name='editable_portal_sections', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'Portal Section',
                'verbose_name_plural': 'Portal Sections',
                'ordering': ['-is_pinned', 'order', 'title'],
            },
        ),
        migrations.CreateModel(
            name='WorkCalendarTask',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(max_length=200)),
                ('description', models.TextField(blank=True)),
                ('due_date', models.DateField(blank=True, null=True)),
                ('importance', models.CharField(choices=[('low', 'Low'), ('medium', 'Medium'), ('high', 'High'), ('critical', 'Critical')], default='medium', max_length=10)),
                ('energy_required', models.CharField(choices=[('light', 'Light'), ('moderate', 'Moderate'), ('deep', 'Deep focus')], default='moderate', max_length=10)),
                ('estimated_minutes', models.PositiveIntegerField(default=30)),
                ('status', models.CharField(choices=[('backlog', 'Backlog'), ('scheduled', 'Scheduled'), ('in_progress', 'In progress'), ('completed', 'Completed'), ('cancelled', 'Cancelled')], default='backlog', max_length=20)),
                ('source_app', models.CharField(blank=True, max_length=100)),
                ('metadata', models.JSONField(blank=True, default=dict)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('owner', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='calendar_tasks', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'ordering': ['status', '-importance', 'due_date', 'title'],
            },
        ),
        migrations.CreateModel(
            name='WorkCalendarEvent',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(max_length=200)),
                ('description', models.TextField(blank=True)),
                ('kind', models.CharField(choices=[('meeting', 'Meeting'), ('focus', 'Focus block'), ('one_on_one', '1:1'), ('training', 'Training'), ('travel', 'Travel'), ('personal', 'Personal placeholder'), ('break', 'Micro-break')], default='meeting', max_length=20)),
                ('start_at', models.DateTimeField()),
                ('end_at', models.DateTimeField()),
                ('location', models.CharField(blank=True, max_length=255)),
                ('priority', models.CharField(choices=[('low', 'Low'), ('normal', 'Normal'), ('high', 'High'), ('critical', 'Critical')], default='normal', max_length=10)),
                ('energy_required', models.CharField(choices=[('light', 'Light'), ('moderate', 'Moderate'), ('deep', 'Deep focus')], default='moderate', max_length=10)),
                ('focus_block', models.BooleanField(default=False)),
                ('focus_reason', models.CharField(blank=True, max_length=255)),
                ('predicted_attendance', models.DecimalField(blank=True, decimal_places=2, help_text='Probability (0-1) that the meeting will hit quorum.', max_digits=5, null=True, validators=[django.core.validators.MinValueValidator(Decimal('0.00')), django.core.validators.MaxValueValidator(Decimal('1.00'))])),
                ('requires_travel', models.BooleanField(default=False)),
                ('smart_notes', models.JSONField(blank=True, default=dict)),
                ('is_private', models.BooleanField(default=False)),
                ('privacy_label', models.CharField(blank=True, help_text='Display text for shared calendars when event is private.', max_length=120)),
                ('source_system', models.CharField(blank=True, max_length=100)),
                ('source_identifier', models.CharField(blank=True, max_length=255)),
                ('created_via_nlp', models.BooleanField(default=False)),
                ('metadata', models.JSONField(blank=True, default=dict)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('organizer', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='organized_calendar_events', to=settings.AUTH_USER_MODEL)),
                ('section', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='calendar_events', to='users.portalsection')),
                ('tasks', models.ManyToManyField(blank=True, related_name='scheduled_events', to='users.workcalendartask')),
            ],
            options={
                'verbose_name': 'Work Calendar Event',
                'verbose_name_plural': 'Work Calendar Events',
                'ordering': ['start_at'],
            },
        ),
        migrations.CreateModel(
            name='ScheduledMicroBreak',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('start_at', models.DateTimeField()),
                ('end_at', models.DateTimeField()),
                ('label', models.CharField(default='Micro-break', max_length=120)),
                ('insertion_mode', models.CharField(choices=[('auto', 'Automatic'), ('suggested', 'Suggested'), ('manual', 'Manual')], default='auto', max_length=10)),
                ('notes', models.TextField(blank=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('related_event', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='microbreaks', to='users.workcalendarevent')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='scheduled_microbreaks', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'ordering': ['start_at'],
            },
        ),
        migrations.CreateModel(
            name='PortalResource',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(max_length=200)),
                ('description', models.TextField(blank=True)),
                ('resource_type', models.CharField(choices=[('file', 'File upload'), ('link', 'External link'), ('embed', 'Embedded content')], default='file', max_length=20)),
                ('file', models.FileField(blank=True, null=True, upload_to='portal/resources/%Y/%m/%d')),
                ('external_url', models.URLField(blank=True)),
                ('embed_code', models.TextField(blank=True, help_text='Optional iframe or script for embedded resources.')),
                ('icon', models.CharField(blank=True, max_length=60)),
                ('tags', models.JSONField(blank=True, default=list)),
                ('display_order', models.PositiveIntegerField(default=0)),
                ('is_featured', models.BooleanField(default=False)),
                ('metadata', models.JSONField(blank=True, default=dict)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('section', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='resources', to='users.portalsection')),
                ('uploaded_by', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='uploaded_portal_resources', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'ordering': ['display_order', '-is_featured', 'title'],
            },
        ),
        migrations.CreateModel(
            name='NaturalLanguageScheduleRequest',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('raw_text', models.TextField()),
                ('normalized_text', models.TextField(blank=True)),
                ('status', models.CharField(choices=[('pending', 'Pending'), ('parsed', 'Parsed'), ('scheduled', 'Scheduled'), ('failed', 'Failed')], default='pending', max_length=20)),
                ('interpreted_start', models.DateTimeField(blank=True, null=True)),
                ('interpreted_end', models.DateTimeField(blank=True, null=True)),
                ('duration_minutes', models.PositiveIntegerField(blank=True, null=True)),
                ('attendees', models.JSONField(blank=True, default=list)),
                ('diagnostics', models.JSONField(blank=True, default=dict)),
                ('error_message', models.TextField(blank=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('associated_event', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='nlp_requests', to='users.workcalendarevent')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='nlp_schedule_requests', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'Natural Language Scheduling Request',
                'ordering': ['-created_at'],
            },
        ),
        migrations.CreateModel(
            name='EventReminder',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('reminder_type', models.CharField(choices=[('standard', 'Standard'), ('travel', 'Travel time'), ('buffer', 'Recovery buffer'), ('wellness', 'Micro-break / wellness')], default='standard', max_length=20)),
                ('offset_minutes', models.IntegerField(default=15)),
                ('message', models.CharField(blank=True, max_length=255)),
                ('smart_payload', models.JSONField(blank=True, default=dict)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('event', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='reminders', to='users.workcalendarevent')),
            ],
            options={
                'ordering': ['offset_minutes'],
            },
        ),
        migrations.CreateModel(
            name='EventAttendance',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('status', models.CharField(choices=[('invited', 'Invited'), ('accepted', 'Accepted'), ('declined', 'Declined'), ('tentative', 'Tentative'), ('no_show', 'No show'), ('attended', 'Attended')], default='invited', max_length=15)),
                ('responded_at', models.DateTimeField(blank=True, null=True)),
                ('attendance_marked_at', models.DateTimeField(blank=True, null=True)),
                ('confidence_score', models.DecimalField(blank=True, decimal_places=2, help_text='Probability the user will show up based on historical data.', max_digits=4, null=True, validators=[django.core.validators.MinValueValidator(Decimal('0.00')), django.core.validators.MaxValueValidator(Decimal('1.00'))])),
                ('auto_detected', models.BooleanField(default=False)),
                ('notes', models.TextField(blank=True)),
                ('event', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='attendance_records', to='users.workcalendarevent')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='calendar_attendance', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'ordering': ['event', 'user__username'],
            },
        ),
        migrations.CreateModel(
            name='CalendarAnalyticsSnapshot',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('range_start', models.DateField()),
                ('range_end', models.DateField()),
                ('meeting_hours', models.DecimalField(decimal_places=2, default=Decimal('0.00'), max_digits=6)),
                ('focus_hours', models.DecimalField(decimal_places=2, default=Decimal('0.00'), max_digits=6)),
                ('ghost_meeting_rate', models.DecimalField(decimal_places=2, default=Decimal('0.00'), max_digits=4, validators=[django.core.validators.MinValueValidator(Decimal('0.00')), django.core.validators.MaxValueValidator(Decimal('1.00'))])),
                ('context_switches', models.PositiveIntegerField(default=0)),
                ('wellness_breaks_inserted', models.PositiveIntegerField(default=0)),
                ('suggestions', models.TextField(blank=True)),
                ('recommendation_payload', models.JSONField(blank=True, default=dict)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='calendar_analytics', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'ordering': ['-range_end'],
            },
        ),
        migrations.AddIndex(
            model_name='workcalendarevent',
            index=models.Index(fields=['start_at', 'end_at'], name='users_workc_start_a_b896b2_idx'),
        ),
        migrations.AddIndex(
            model_name='workcalendarevent',
            index=models.Index(fields=['organizer', 'start_at'], name='users_workc_organiz_8e07b3_idx'),
        ),
        migrations.AlterUniqueTogether(
            name='eventattendance',
            unique_together={('event', 'user')},
        ),
        migrations.AlterUniqueTogether(
            name='calendaranalyticssnapshot',
            unique_together={('user', 'range_start', 'range_end')},
        ),
    ]
