---
description: 
globs: 
alwaysApply: false
---
# Form Styling Rule

## Overview
This rule establishes a consistent approach to form styling across the entire application by:
1. Centralizing style definitions in `base.css`
2. Using base form classes to automatically apply styles
3. Minimizing duplicate styling code
4. Making style changes maintainable

## Implementation Steps

### 1. Base CSS (Already Done)
We've already added the form styles to `base.css` which defines:
- `form-input`: For text inputs, numbers, dates, etc.
- `form-select`: For dropdown selects
- `form-checkbox`: For checkboxes
- `form-group`: For form field containers
- `form-label`: For field labels
- `field-error`: For error messages

### 2. Base Form Classes (Just Added)
We've created base form classes that automatically apply these styles:
- `BaseFormMixin`: Core styling logic
- `BaseModelForm`: For model-based forms
- `BaseForm`: For regular forms

### 3. Converting Existing Forms

To convert your existing forms, follow these steps:

1. Change the parent class:
```python
# Before
class MyForm(forms.ModelForm):
    ...

# After
class MyForm(BaseModelForm):
    ...
```

2. Remove redundant styling:
```python
# Before
widgets = {
    'field_name': forms.TextInput(attrs={
        'class': 'w-full rounded-md border-gray-300 shadow-sm focus:border-blue-500 focus:ring-blue-500',
        'placeholder': 'Enter Field Name'
    })
}

# After
widgets = {
    'field_name': forms.TextInput()  # Styling handled by BaseFormMixin
}
```

3. Only specify special attributes:
```python
widgets = {
    'date_field': forms.DateTimeInput(attrs={
        'type': 'datetime-local'  # Only specify what's unique
    }),
    'notes': forms.Textarea(attrs={
        'rows': 4  # Only specify what's different from default
    })
}
```

### 4. Example Usage

Here's how to use the new system:

```python
# Simple form
class ContactForm(BaseModelForm):
    class Meta:
        model = Contact
        fields = ['name', 'email', 'message']
        # No widgets needed unless special attributes required

# Form with special widgets
class EventForm(BaseModelForm):
    class Meta:
        model = Event
        fields = ['title', 'date', 'description']
        widgets = {
            'date': forms.DateTimeInput(attrs={
                'type': 'datetime-local'
            }),
            'description': forms.Textarea(attrs={
                'rows': 5
            })
        }
```

### 5. Benefits

1. **Consistency**: All forms automatically get the same styling
2. **Maintainability**: Change styles in one place (`base.css`)
3. **DRY Code**: No repeated style definitions
4. **Automatic Placeholders**: Generated from field labels
5. **Flexible**: Easy to override when needed

### 6. Migration Plan

To implement this across your site:

1. First, update `forms.py` with the base classes (done)
2. Convert one form at a time to use `BaseModelForm`
3. Remove redundant styling from each form
4. Test each form after conversion
5. Keep only special widget attributes that differ from defaults

Would you like me to help you convert more of your existing forms to use this new system? We can start with any form class you'd like to tackle first.




